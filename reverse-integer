/*
 * Given a 32-bit signed integer, reverse digits of an integer.
 * Example 1:

 * Input: 123
 * Output: 321
 * Example 2:

 * Input: -123
 * Output: -321
 * Example 3:

 * Input: 120
 * Output: 21
 *
 */

#include <string.h>
#include <stdlib.h>

int reverse(int x){
    
    char numberStr[33], numberStrZero[33], finalStr[33], cmpStr[33]; //length of 33 because of sign 
    int retNum = 0, numLength, isNegative = 0, zeroCount = 0;
    
    // test if number is negative, if true transform into positive
    if((x * 1) < 0){
        //printf("Number is negative.\n");
        isNegative = 1;
        x *= -1;
        //printf("Tranformed input: %d\n", x);
    }
    
    // convert int to char string
    sprintf(numberStr, "%d", x);
    numLength = strlen(numberStr);
    
    // reverses string
    for(int i = 0; i < numLength/2; i++){
        
        int backIndex = numLength - 1 - i;
        int temp = numberStr[i];
        numberStr[i] = numberStr[backIndex];
        numberStr[backIndex] = temp;
    }
    
    //printf("String is: %s\n", numberStr);
    
    int i = 0;
    while(numberStr[i] == '0' || numberStr[i] < numLength){
        //printf("%d\n", numberStr[i]);
        zeroCount++;
        i++;
    }
    //printf("Zero Count: %d\n", zeroCount);
    
    int j = 0;
    for(int i = zeroCount; i < numLength; i++){
        
        //printf("i: %d\n", i);
        //printf("numberStr: %c\n", numberStr[i]);
        numberStrZero[j] = numberStr[i];
        j++;
    }
    
    //printf("No zero str: %s\n", numberStrZero);
    
    //add back negative sign if applicable
    if(isNegative){
        sprintf(finalStr, "-%s", numberStrZero);
    } else {
        sprintf(finalStr, "%s", numberStrZero);
    }
    
    //printf("Final str: %s\n", finalStr);
    retNum = atoi(finalStr);
    //printf("Final num: %d\n", retNum);
    
    // compare previous final string and convert atoi num back into
    // string for comparison. If same then number is valid, else atoi over/under
    // flowed
    
    sprintf(cmpStr, "%d", retNum);
    int equal = strcmp(finalStr, cmpStr);
    //printf("%d", equal);
    if(equal != 0){
        return 0;
    } else {
        return retNum;
    }
}
