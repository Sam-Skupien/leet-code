/*
We are given two strings, A and B.

A shift on A consists of taking string A and moving the leftmost character to the rightmost position. For example, if A = 'abcde', then it will be 'bcdea' after one shift on A. Return True if and only if A can become B after some number of shifts on A.

Example 1:
Input: A = 'abcde', B = 'cdeab'
Output: true

Example 2:
Input: A = 'abcde', B = 'abced'
Output: false
Note:

A and B will have length at most 100.

/*


#include <strings.h>
void shiftStr(char* A, char* tmp, int start, int strLength);
bool rotateString(char * A, char * B){

    int aLength = strlen(A);
    int bLength = strlen(B);
    
    //printf("length a: %d length b: %d", aLength, bLength);
    
    // if one string is shorter than the other than it can never be equal
    if((aLength < bLength) || (bLength < aLength)){
        return false;
    }
    
    // if they are already equivalent return true
    if(!strcmp(A, B)){
        return true;
    }
    
    //printf("length: %d\n\n", aLength);
    // main loop to shift characters
    for(int i = 0; i < aLength; i++){
        
        // pass array with function and use void return
        printf("outer loop index: %d\n", i);
        char tmp[aLength + 1];
        shiftStr(A, tmp, i, aLength);
        printf("\n");
        //printf("%s ", tmp);
        if(!(strcmp(A,tmp))){
            return true;
        }
    }
    
    return false;
}

void shiftStr(char* A, char* tmp, int start, int strLength){
    
    for(int i = 0; i < strLength; i++){
        
        int index = start % strLength;
        printf("   i, start, index: %d %d %d ", i, start, start % strLength);
        char c = A[index];
        tmp[i] = c;
        printf("   %c\n", A[index]);
        start++;
        
    }
}
