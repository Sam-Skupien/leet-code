/*Given the root node of a binary search tree, return the sum of values of all nodes with value between L and R (inclusive).

The binary search tree is guaranteed to have unique values.

 

Example 1:

Input: root = [10,5,15,3,7,null,18], L = 7, R = 15
Output: 32
Example 2:

Input: root = [10,5,15,3,7,13,18,1,null,6], L = 6, R = 10
Output: 23
 

Note:

The number of nodes in the tree is at most 10000.
The final answer is guaranteed to be less than 2^31.
*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

void treeSum(struct TreeNode* node, int L, int R, int* sum);
int rangeSumBST(struct TreeNode* root, int L, int R){

    int* sum = NULL;
    int num = 0;
    sum = &num;
    treeSum(root, L, R, sum);
    printf("%d", *sum);
    return *sum;
}

void treeSum(struct TreeNode* node, int L, int R, int* sum){

    if(node != NULL){
        if((node->val >= L) && (node->val <= R)){
            *sum += node->val;
        }
        
        treeSum(node->left, L, R, sum);
        treeSum(node->right, L, R, sum);
    }
    
}
