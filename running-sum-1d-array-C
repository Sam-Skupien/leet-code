Given an array nums. We define a running sum of an array as runningSum[i] = sum(nums[0]â€¦nums[i]).

Return the running sum of nums.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].
Example 2:

Input: nums = [1,1,1,1,1]
Output: [1,2,3,4,5]
Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].
Example 3:

Input: nums = [3,1,2,10,1]
Output: [3,4,6,16,17]
 

Constraints:

1 <= nums.length <= 1000
-10^6 <= nums[i] <= 10^6


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* runningSum(int* nums, int numsSize, int* returnSize){

    // if nums is length of 1 return original array
    if(numsSize == 1){
        *returnSize = numsSize;
        return nums;
    }
    
    // zero out return array
    int *retArr = (int*)malloc(sizeof(int) * numsSize);
    
    // if heap space cannot be allocated exit program
    if(retArr == NULL){
        exit(0);
    }
    
    for(int i = 0; i < numsSize; i++){
        retArr[i] = 0;
    }
    
    // for each i in array, use second for loop to sum up to current i to get the correct sum for position
    for(int i = 0; i < numsSize; i++){
        for(int index = 0; index <= i; index++){
            retArr[i] += nums[index];
        }
    }
    
    /*
    for(int i = 0; i < numsSize; i++){
        printf("%d\n", retArr[i]); 
    }*/
    
    *returnSize = numsSize;
    return retArr;
}
