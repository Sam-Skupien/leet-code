/*
Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

Example 1:

Given nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.

It doesn't matter what you leave beyond the returned length.
Example 2:

Given nums = [0,0,1,1,1,2,2,3,3,4],

Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.
/*



int removeDuplicates(int* nums, int numsSize){
    
    if(numsSize == 0){
        return 0;
    }

    // get largest int in array and use it to control while loop
    int largestInt = 0;
    for(size_t i = 0; i < numsSize; ++i){
        if(nums[i] > largestInt){
            largestInt = nums[i];
        }
    }
    
    // set currNum to the smallest integer in nums
    int currNum = nums[0];
    int index = 0;
    
    /* while the smallest element in the array is less than the largest int in the
      array iterate through array to find a match. If a match exists the element
      is placed in the current index and both the index and currNum are incremented.
      else just increment currNum
       runtime is O(n^2)
    */
    while(currNum <= largestInt){
        
        for(size_t i = 0; i < numsSize; ++i){
            
            if(currNum == nums[i]){
                nums[index] = currNum;
                ++index;
                break;
            }
        }
        ++currNum;
    }
    
    // return index as new array
    return index;
}
